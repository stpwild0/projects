course(algorithms, mwf9, mcb209).
course(models_and_analysis, mwf9, mcb211).
course(data_structures, mwf3, mcb305).
course(operating_systems, tth9, mcb306).
course(programming_in_c, mwf1, mcb209).
course(artificial_intelligence, tth3, mcb311).
course(computer_architecture, tth1, neb2300).
course(models_of_computation, tth11, mcb204).
course(discrete_math, tth3, mcb204).
course(information_retrieval, mwf3, mcb205).
course(software_engineering, mwf11, mcb213).
course(computer_vision, mwf1, neb2182).
course(os_tools, tth1, mcb217).
course(programming_lang, tth9, mcb311).
course(programming_in_java, tth11, mcb204).

teaches(smith, algorithms).
teaches(jones, models_and_analysis).
teaches(ray, data_structures).
teaches(smith, operating_systems).
teaches(ray, programming_in_c).
teaches(jones, artificial_intelligence).
teaches(gibson, computer_architecture).
teaches(smith, models_of_computation).
teaches(smith, discrete_math).
teaches(jones, information_retrieval).
teaches(gibson, software_engineering).
teaches(jones, computer_vision).
teaches(gibson, os_tools).
teaches(ray, programming_lang).
teaches(ray, programming_in_java).

coursetype(algorithms, theory).
coursetype(models_and_analysis, theory).
coursetype(data_structures, core).
coursetype(operating_systems, core).
coursetype(programming_in_c, prog).
coursetype(artificial_intelligence, elective).
coursetype(computer_architecture, core).
coursetype(models_of_computation, theory).
coursetype(discrete_math, theory).
coursetype(information_retrieval, elective).
coursetype(software_engineering, elective).
coursetype(computer_vision, elective).
coursetype(os_tools, core).
coursetype(programming_lang, prog).
coursetype(programming_in_java, prog).

taking(michael, algorithms).
taking(michael, software_engineering).
taking(michael, programming_lang).
taking(joanne, artificial_intelligence).
taking(joanne, information_retrieval).
taking(joanne, programming_lang).
taking(bill, algorithms).
taking(bill, artificial_intelligence).
taking(bill, computer_vision).

schedule(Lecturer, Course, Time, Place) :-
	course(Course, Time, Place),
	teaches(Lecturer, Course).

sametime(LecturerA, LecturerB, Time) :-
	schedule(LecturerA, _, Time, _),
	schedule(LecturerB, _, Time, _),
	LecturerA \= LecturerB.

coursesincommon(StudentA, StudentB, Course) :-
	taking(StudentA, Course),
	taking(StudentB, Course),
	StudentA \= StudentB.

takingtype(Student, Type) :-
	taking(Student, Course),
	coursetype(Course, Type).

schedulingconflict(Room, Lecturer, CourseA, CourseB, Time) :-
	roomconflict(Room, CourseA, CourseB, Time);
	professorconflict(Lecturer, CourseA, CourseB, Time).

roomconflict(Room, CourseA, CourseB, Time) :-
	course(CourseA, Time, Room),
	course(CourseB, Time, Room),
	CourseA \= CourseB.

professorconflict(Lecturer, CourseA, CourseB, Time) :-
	schedule(Lecturer, CourseA, Time, _),
	schedule(Lecturer, CourseB, Time, _),
	CourseA \= CourseB.
